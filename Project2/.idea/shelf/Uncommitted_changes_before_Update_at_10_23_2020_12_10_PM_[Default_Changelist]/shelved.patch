Index: tests/custom_tests.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import csv\r\nimport multiprocessing.pool\r\nimport random\r\nimport socket\r\nimport sys\r\nimport time\r\n\r\nimport test_packages.lossy_socket\r\nfrom test_packages.streamer import Streamer\r\n\r\nreserved_ports = []\r\ntest_results = []\r\n\r\n\r\nclass NoDaemonProcess(multiprocessing.Process):\r\n    # make 'daemon' attribute always return False\r\n    def _get_daemon(self):\r\n        return False\r\n\r\n    def _set_daemon(self, value):\r\n        pass\r\n\r\n    daemon = property(_get_daemon, _set_daemon)\r\n\r\n\r\n# We sub-class multiprocessing.pool.Pool instead of multiprocessing.Pool\r\n# because the latter is only a wrapper function, not a proper class.\r\nclass MyPool(multiprocessing.pool.Pool):\r\n    Process = NoDaemonProcess\r\n\r\n\r\ndef receive(s, nums):\r\n    expected = 0\r\n    str_buf = \"\"\r\n    while expected < nums:\r\n        data = s.recv()\r\n        # print(\"recv returned {%s}\" % data.decode('utf-8'))\r\n        str_buf += data.decode('utf-8')\r\n        for t in str_buf.split(\" \"):\r\n            if len(t) == 0:\r\n                # there could be a \"\" at the start or the end, if a space is there\r\n                continue\r\n            if int(t) == expected:\r\n                # print(\"got %d!\" % expected)\r\n                expected += 1\r\n                str_buf = ''\r\n            elif int(t) > expected:\r\n                # print(\"ERROR: got %s but was expecting %d\" % (t, expected))\r\n                sys.exit(-1)\r\n            else:\r\n                # we only received the first part of the number at the end\r\n                # we must leave it in the buffer and read more.\r\n                str_buf = t\r\n                break\r\n\r\n\r\ndef host1(listen_port, remote_port, nums, alpha, beta, default_wait_seconds,\r\n          sim: test_packages.lossy_socket.SimulationParams):\r\n    s = Streamer(dst_ip=\"localhost\", dst_port=remote_port,\r\n                 src_ip=\"localhost\", src_port=listen_port)\r\n\r\n    s.socket.sim = sim\r\n\r\n    s.alpha = alpha\r\n    s.beta = beta\r\n    s.default_wait_seconds = default_wait_seconds\r\n\r\n    receive(s, nums)\r\n\r\n    # print(\"STAGE 1 TEST PASSED!\")\r\n    # send large chunks of data\r\n    i = 0\r\n    buf = \"\"\r\n    while i < nums:\r\n        buf += (\"%d \" % i)\r\n        if len(buf) > 12345 or i == nums - 1:\r\n            # print(\"sending {%s}\" % buf)\r\n            s.send(buf.encode('utf-8'))\r\n            buf = \"\"\r\n        i += 1\r\n    s.close()\r\n    # print(\"CHECK THE OTHER SCRIPT FOR STAGE 2 RESULTS.\")\r\n\r\n    return s.socket.stats.bytes_recv, s.socket.stats.bytes_sent, s.socket.stats.packets_recv, s.socket.stats.packets_sent\r\n\r\n\r\ndef host2(listen_port, remote_port, nums, alpha, beta, default_wait_seconds,\r\n          sim: test_packages.lossy_socket.SimulationParams):\r\n    s = Streamer(dst_ip=\"localhost\", dst_port=remote_port,\r\n                 src_ip=\"localhost\", src_port=listen_port)\r\n\r\n    s.socket.sim = sim\r\n\r\n    s.alpha = alpha\r\n    s.beta = beta\r\n    s.default_wait_seconds = default_wait_seconds\r\n\r\n    # send small pieces of data\r\n    for i in range(nums):\r\n        buf = (\"%d \" % i)\r\n        # print(\"sending {%s}\" % buf)\r\n        s.send(buf.encode('utf-8'))\r\n    receive(s, nums)\r\n    s.close()\r\n\r\n    # print(\"STAGE 2 TEST PASSED!\")\r\n\r\n    return s.socket.stats.bytes_recv, s.socket.stats.bytes_sent, s.socket.stats.packets_recv, s.socket.stats.packets_sent\r\n\r\n\r\ndef get_available_port() -> int:\r\n    curr_port = random.randrange(8000, 65535)\r\n    while curr_port in reserved_ports or not test_port(curr_port):\r\n        curr_port = random.randrange(8000, 65535)\r\n    return curr_port\r\n\r\n\r\ndef test_port(port_num: int) -> bool:\r\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n    result = sock.connect_ex(('127.0.0.1', port_num))\r\n    if result == 0:\r\n        sock.close()\r\n        return False\r\n    else:\r\n        reserved_ports.append(port_num)\r\n        sock.close()\r\n        return True\r\n\r\n\r\ndef test_async(nums, loss_rate, corruption_rate, max_delivery_delay, alpha, beta, default_wait_seconds) -> list:\r\n    start_time = time.time()\r\n    executor = MyPool(2)\r\n    sim1 = test_packages.lossy_socket.SimulationParams(loss_rate=loss_rate, corruption_rate=corruption_rate,\r\n                                                       max_delivery_delay=max_delivery_delay,\r\n                                                       become_reliable_after=100000000.0)\r\n\r\n    sim2 = test_packages.lossy_socket.SimulationParams(loss_rate=loss_rate, corruption_rate=corruption_rate,\r\n                                                       max_delivery_delay=max_delivery_delay,\r\n                                                       become_reliable_after=100000000.0)\r\n\r\n    port_1 = get_available_port()\r\n    port_2 = get_available_port()\r\n\r\n    # print(\"TESTING ON PORTS\", port_1, port_2, \"with\", nums, \"nums\")\r\n    thread_1 = executor.apply_async(func=host1, args=(port_2, port_1, nums, alpha, beta, default_wait_seconds, sim1))\r\n    thread_2 = executor.apply_async(func=host2, args=(port_1, port_2, nums, alpha, beta, default_wait_seconds, sim2))\r\n\r\n    stats1_bytes_recv, stats1_bytes_sent, stats1_packets_recv, stats1_packets_sent = thread_1.get()\r\n    stats2_bytes_recv, stats2_bytes_sent, stats2_packets_recv, stats2_packets_sent = thread_2.get()\r\n\r\n    res = [nums, loss_rate, corruption_rate, max_delivery_delay, alpha, beta, default_wait_seconds,\r\n           time.time() - start_time,\r\n           stats1_packets_sent,\r\n           stats1_packets_recv,\r\n           stats1_bytes_sent,\r\n           stats1_bytes_sent + (18 + 20 + 8) * stats2_packets_sent,\r\n           stats1_bytes_recv,\r\n           stats1_bytes_recv + (18 + 20 + 8) * stats2_bytes_recv,\r\n           stats2_packets_sent,\r\n           stats2_packets_recv,\r\n           stats2_bytes_sent,\r\n           stats2_bytes_sent + (18 + 20 + 8) * stats2_packets_sent,\r\n           stats2_bytes_recv,\r\n           stats2_bytes_recv + (18 + 20 + 8) * stats2_bytes_recv,\r\n           ]\r\n\r\n    executor.close()\r\n    executor.join()\r\n\r\n    return res\r\n\r\n\r\n# loss_rates = [0.1, 0.2]\r\n# corruption_rates = [0.1, 0.2]\r\n# max_delivery_delays = [0.1, 0.2]\r\n#\r\n# alphas = [0.1, 0.2]\r\n# betas = [0, 0.1, 0.25]\r\n# default_wait_seconds_list = [0.0001, 0.001, 0.01]\r\n#\r\n# nums_list = [100, 1000, 10000]\r\n\r\nloss_rates = [0.1, 0.3]\r\ncorruption_rates = [0.1, 0.3]\r\nmax_delivery_delays = [0.1, 0.3]\r\nalphas = [0.1, 0.125, 0.2]\r\nbetas = [0, 0.1, 0.25]\r\ndefault_wait_seconds_list = [0.01, 0.1]\r\nnums_list = [100, 1000, 10000]\r\n\r\n\r\ndef get_combinations(list_1: list, list_2: list) -> list:\r\n    res = []\r\n    for item_1 in list_1:\r\n        for item_2 in list_2:\r\n            if isinstance(item_1, list) and isinstance(item_2, list):\r\n                res.append(item_1 + item_2)\r\n            elif isinstance(item_1, list):\r\n                res.append(item_1 + [item_2])\r\n            elif isinstance(item_2, list):\r\n                res.append([item_1] + item_2)\r\n            else:\r\n                res.append([item_1, item_2])\r\n    return res\r\n\r\n\r\ndef get_complete_combinations(lists) -> list:\r\n    res = lists[0]\r\n    for l in lists[1:]:\r\n        res = get_combinations(res, l)\r\n\r\n    return res\r\n\r\n\r\ndef main():\r\n    if len(sys.argv) < 2:\r\n        print(\"usage is: python3 custom_tests.py [num_processes]\")\r\n    combinations = get_complete_combinations(\r\n        [loss_rates, corruption_rates, max_delivery_delays, alphas, betas, default_wait_seconds_list])\r\n\r\n    num_processes = int(sys.argv[1])\r\n    executor = MyPool(processes=num_processes)\r\n\r\n    index = 0\r\n    total_len = len(combinations) * len(nums_list)\r\n    threads = []\r\n\r\n    with open('test_outputs.csv', 'a+', newline='') as file_writer:\r\n        csv_writer = csv.writer(file_writer)\r\n        csv_writer.writerow([\"nums\", \"loss_rate\", \"corruption_rate\", \"max_delivery_delay\", \"alpha\", \"beta\", \"default_wait_seconds\",\r\n         \"elapsed time\",\r\n         \"PACKETS_SENT1\",\r\n         \"PACKETS_RECV1\",\r\n         \"UDP BYTES SENT1\",\r\n         \"ETH BYTES SENT1\",\r\n         \"UDP BYTES RECV1\",\r\n         \"ETH BYTES RECV1\",\r\n         \"PACKETS_SENT2\",\r\n         \"PACKETS_RECV2\",\r\n         \"UDP BYTES SENT2\",\r\n         \"ETH BYTES SENT2\",\r\n         \"UDP BYTES RECV2\",\r\n         \"ETH BYTES RECV2\",\r\n         ])\r\n\r\n        for nums in nums_list:\r\n            for loss_rate, corruption_rate, max_delivery_delay, alpha, beta, default_wait_seconds in combinations:\r\n                print(int(index / total_len * 100), '%  === ', len(threads))\r\n                while len(threads) >= num_processes:\r\n                    for thread in threads:\r\n                        if thread.ready():\r\n                            csv_writer.writerow(thread.get())\r\n                            threads.remove(thread)\r\n                            index += 1\r\n                    time.sleep(0.1)\r\n                test_thread = executor.apply_async(func=test_async,\r\n                                                   args=(\r\n                                                       nums, loss_rate, corruption_rate, max_delivery_delay, alpha,\r\n                                                       beta,\r\n                                                       default_wait_seconds))\r\n                threads.append(test_thread)\r\n\r\n        for thread in threads:\r\n            csv_writer.writerow(thread.get())\r\n\r\n        executor.close()\r\n        executor.join()\r\n\r\n        print(\"TESTS COMPLETE\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/custom_tests.py	(revision 21fe8364db226739540061d9fe3c6423b8fa34ac)
+++ tests/custom_tests.py	(date 1603470910222)
@@ -24,10 +24,10 @@
 
 
 # We sub-class multiprocessing.pool.Pool instead of multiprocessing.Pool
-# because the latter is only a wrapper function, not a proper class.
+# because the latter is only a wrapper funrecentction, not a proper class.
 class MyPool(multiprocessing.pool.Pool):
     Process = NoDaemonProcess
-
+recent
 
 def receive(s, nums):
     expected = 0
Index: .idea/Project2.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <excludeFolder url=\"file://$MODULE_DIR$/venv\" />\r\n    </content>\r\n    <orderEntry type=\"inheritedJdk\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/Project2.iml	(revision 21fe8364db226739540061d9fe3c6423b8fa34ac)
+++ .idea/Project2.iml	(date 1603471039804)
@@ -4,7 +4,7 @@
     <content url="file://$MODULE_DIR$">
       <excludeFolder url="file://$MODULE_DIR$/venv" />
     </content>
-    <orderEntry type="inheritedJdk" />
+    <orderEntry type="jdk" jdkName="Python 3.7" jdkType="Python SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
 </module>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"JavaScriptSettings\">\r\n    <option name=\"languageLevel\" value=\"ES6\" />\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.7 (Project2)\" project-jdk-type=\"Python SDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(revision 21fe8364db226739540061d9fe3c6423b8fa34ac)
+++ .idea/misc.xml	(date 1603471039817)
@@ -3,5 +3,5 @@
   <component name="JavaScriptSettings">
     <option name="languageLevel" value="ES6" />
   </component>
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.7 (Project2)" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.7" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
